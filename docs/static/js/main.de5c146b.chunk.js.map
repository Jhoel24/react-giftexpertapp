{"version":3,"sources":["helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/AddCategory.js","components/GifExpertApp.js","index.js"],"names":["getGifs","categoria","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","Lista","useState","loading","state","setState","useEffect","then","imgs","useFetchGifs","AddCategory","setCategories","inputValue","setInputValue","error","setError","onSubmit","e","preventDefault","setTimeout","cats","type","value","onChange","target","GifExpertApp","categories","GifGrid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAEaA,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAIKI,MAAMF,GAJX,cAIbG,EAJa,gBAKEA,EAAUC,OALZ,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sD,OCgBLO,EAhBK,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAC7B,OAEY,qBAAKc,UAAU,gBAAf,SACI,sBAAKA,UAAU,gDAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAI,UAAUF,UAAU,+BACvC,qBAAKA,UAAU,YAAf,SACA,4BAAIJ,YCsBbO,EA1BD,SAAC,GAAiB,IAAhBnB,EAAe,EAAfA,UAEZ,ECHwB,SAACA,GAEzB,MAA0BoB,mBAAS,CAC/Bb,KAAM,GACNc,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAU,WAENzB,EAAQC,GACHyB,MAAK,SAAAC,GACEH,EAAS,CACLhB,KAAMmB,EACNL,SAAS,SAI1B,CAACrB,IAEGsB,EDhByBK,CAAa3B,GAAjCa,EAAZ,EAAON,KAAcc,EAArB,EAAqBA,QAGrB,OACI,qCACA,oBAAIL,UAAU,2CAAd,SAA0DhB,IAEzDqB,GAAW,mBAAGL,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,MAAf,SAEYH,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAESA,GADAA,EAAIC,aEyCtBiB,EA1DK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAElB,EAAoCT,mBAAS,IAA7C,mBAAOU,EAAP,KAAmBC,EAAnB,KACA,EAA0BX,oBAAS,GAAnC,mBAAOY,EAAP,KAAcC,EAAd,KA2BA,OACI,qCACCD,EACG,qBAAKhB,UAAU,qBAAf,SACI,mBAAGA,UAAU,qCAAb,kDAGF,KAEN,sBAAMkB,SA5BW,SAACC,GAGlB,GAFAA,EAAEC,iBAEgB,KAAfN,EAMC,OALAG,GAAS,QACTI,YAAW,WACPJ,GAAS,KACV,KAKPJ,GAAc,SAAAS,GAAI,MAAI,CAACR,MAEvBC,EAAc,KAcd,SACQ,qBAAKf,UAAU,QAAf,SACI,uBACIuB,KAAK,OACLC,MAAOV,EACPW,SAtCM,SAACN,GAEvBJ,EAAcI,EAAEO,OAAOF,kBCqChBG,EA5CM,WAIjB,MAAoCvB,mBAAS,CAAC,cAA9C,mBAAOwB,EAAP,KAAmBf,EAAnB,KAkBA,OAEI,qCACI,8CACA,cAAC,EAAD,CACIA,cAAeA,IAEnB,uBAEA,6BACKe,EAAWnC,KAAI,SAACT,GAAD,OACZ,cAAC6C,EAAD,CACI7C,UAAWA,GACNA,Y,MC7B7B8C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.de5c146b.chunk.js","sourcesContent":["\n\nexport const getGifs = async (categoria) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=10&api_key=Bih5jyNwK2J8Tm4NWnwjMAWC4uIEi5DR`;\n    \n    const respuesta = await fetch(url);\n    const {data} = await respuesta.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n    \n\n\n}","import React from 'react';\n\nconst GifGridItem = ({id, title, url}) => {\n    return ( \n            \n                <div className=\"col-md-4 mb-3\">\n                    <div className=\"card animate__animated animate__fadeInDownBig\">\n                        <img src={url} alt=\"{title}\" className=\"card-img-top img-thumbnail\"/>\n                        <div className=\"card-text\">\n                        <p>{title}</p>\n                        </div>\n                    </div>\n                </div>\n           \n       \n     );\n}\n \nexport default GifGridItem;","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n// import { getGifs } from '../helpers/getGifs';\n\nconst Lista = ({categoria}) => {\n\n    const {data:images , loading} = useFetchGifs(categoria);\n\n\n    return ( \n        <>\n        <h3 className=\"animate__animated animate__fadeInDownBig\">{categoria}</h3>\n        \n        {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n\n        <div className=\"row\">\n                {\n                    images.map((img) => (\n                        <GifGridItem \n                            key={img.id}\n                            { ...img }\n                        />\n                    ))\n                }\n           \n        </div>\n        </>\n     );\n}\n \nexport default Lista;","import {useState, useEffect} from 'react';\nimport {getGifs} from '../helpers/getGifs';        \n\n\nexport const useFetchGifs = (categoria) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n\n        getGifs(categoria)\n            .then(imgs => {\n                    setState({\n                        data: imgs,\n                        loading: false\n                    }); \n            })\n\n    }, [categoria])\n\n    return state; // {data:[], loading: true}\n\n}\n","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n    const [error, setError] = useState(false);\n\n\n    const handleInputChange = (e) => {\n        // console.log(e.target.value);\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e ) => {\n        e.preventDefault();\n\n        if(inputValue === '') {\n            setError(true);\n            setTimeout(() => {\n                setError(false);\n            }, 1000);\n\n            return;\n        }\n\n        setCategories(cats => [inputValue]);\n\n        setInputValue('');\n\n    }\n\n\n    return ( \n        <>\n        {error ? \n            <div className=\"alert alert-danger\">\n                <p className=\"text-center text-uppercase fw-bold\">No puedes mandar un campo vac√≠o</p>\n            </div>\n            \n            : null\n        }\n        <form onSubmit={handleSubmit}>\n                <div className=\"input\">\n                    <input \n                        type=\"text\"\n                        value={inputValue}\n                        onChange={handleInputChange}\n                        />\n                </div>\n            </form>\n        \n        </>\n\n     );\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n \nexport default AddCategory;","import React, {useState} from 'react';\nimport GifGrid from './GifGrid';\nimport AddCategory from './AddCategory';\n\nconst GifExpertApp = () => {\n\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n\n    const [categories, setCategories] = useState(['One Punch']);\n    // const [dato, setDato] = useState('');\n\n    // const handleAdd = (e) => {\n\n    //     e.preventDefault();\n\n    //     setCategories([...categories, dato]);\n\n    //     setDato('');\n    // }\n\n    // const guardarDato = (e) => {\n    //     // console.log(e.target.value);\n    //     setDato(e.target.value)\n    // }\n\n\n    return ( \n\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory \n                setCategories={setCategories}\n            />\n            <hr />\n\n            <ol>\n                {categories.map((categoria) => (\n                    <GifGrid\n                        categoria={categoria}\n                        key={categoria}\n                    />\n                ))}\n            </ol>\n        </>\n\n     );\n}\n \nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './components/GifExpertApp';\n\n\nimport './index.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}